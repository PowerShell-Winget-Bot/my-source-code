#   Copyright 2020 Jacob Kiesel
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# Load up code for getting product codes from an MSI file.
$msiTools = Add-Type -PassThru -Name 'MsiTools' -Using 'System.Text' -MemberDefinition $(Get-Content "MsiTools.cs")
Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
Install-Module -Name powershell-yaml -AcceptLicense
Import-Module powershell-yaml
gh auth setup-git
git config --global user.email "kieseljake+powershellwingetbot@live.com"
git config --global user.name "PowerShell-Winget-Bot"
gh repo clone "PowerShell-Winget-Bot/winget-pkgs"
Set-Location winget-pkgs
git pull upstream master
git push
$yamlHeader = @'
# Auto-generated by PowerShell-Winget-Bot (https://github.com/PowerShell-Winget-Bot)
# yaml-language-server: $schema=https://aka.ms/winget-manifest.installer.1.2.0.schema.json


'@
$lastFewVersions = gh release list --repo PowerShell/PowerShell
  | Select-Object -Skip 1
  | ForEach-Object { $_.Substring(0, $_.IndexOf(' '))}
  | Select-String -Pattern 'v(\d+?\.\d+?\.\d+)$' 
  | ForEach-Object { $_.Matches[0].Groups[1].Value }
  | Select-Object -First 5
$myPrs = gh pr list --author "PowerShell-Winget-Bot" --repo "microsoft/winget-pkgs" --state=all
  | Foreach-Object {((($_ -split '\t')[2]) -split ':')[1]};
$publishedVersions = Get-ChildItem .\manifests\m\Microsoft\PowerShell\
    | Foreach-Object {$_.Name}
    | Where-Object {!$_.Contains('.validation')}
    | Select-Object -Last 5
foreach ($version in $lastFewVersions) {
    if ($publishedVersions.Contains($version)) {
        continue;
    } else {
        if ($myPrs -and $myPrs.Contains("powershell-$version")) {
            continue;
        }
        $fourVersion = -join($version, ".0");
        Write-Output "Creating branch for $version"
        git checkout master;
        git checkout -b powershell-$version;
        New-Item "manifests/m/Microsoft/PowerShell/$fourVersion/" -ItemType Directory -ea 0
        $yamlPath = "manifests/m/Microsoft/PowerShell/$fourVersion/PowerShell.installer.yaml";
        $yamlObject = New-Object –TypeName PSObject -Property @{
            PackageIdentifier = "Microsoft.PowerShell";
            Platform = @("Windows.Desktop");
            Scope = "machine";
            InstallModes = @("interactive", "silent", "silentWithProgress");
            Commands = @("pwsh");
            ReleaseDate = "todo";
            PackageVersion = $fourVersion;
            MinimumOSVersion = "10.0.0.0";
            InstallerType = "wix";
            UpgradeBehavior = "install";
            ManifestType = "installer";
            ManifestVersion = "1.2.0";
            Installers = @(); # To be filled later
        };
        $installers = @(
            "https://github.com/PowerShell/PowerShell/releases/download/v$version/PowerShell-$version-win-x64.msi",
            "https://github.com/PowerShell/PowerShell/releases/download/v$version/PowerShell-$version-win-x86.msi"
        );
        foreach ($installer in $installers) {
            $path = $installer.Substring($installer.LastIndexOf('/') + 1);
            Write-Output "Now downloading $path from $installer"
            Invoke-WebRequest -Uri $installer -Outfile $path
            if(!$?) {
                Write-Output "Failed to download file, skipping"
                continue;
            }
            $sha256 = (Get-FileHash $path -Algorithm SHA256).Hash;
            Remove-Item $path;
            Invoke-WebRequest -Uri $installer -Outfile $path
            if(!$?) {
                Write-Output "Failed to download file, skipping"
                continue;
            }
            $sha256_2 = (Get-FileHash $path -Algorithm SHA256).Hash;
            if (-not($sha256 -eq $sha256_2)) {
                throw "Sha256 returned two different results, shutting down to lack of confidence in sha value"
            }
            $absolutePath = Resolve-Path $path;
            $productCode = $msiTools::GetProductCode($absolutePath);
            Remove-Item $path;
            $arch = if ($installer.Contains("x86")) {
                "x86"
            } elseif ($installer.Contains("x64")) {
                "x64"
            } 
            $installerEntry = New-Object –TypeName PSObject -Property @{
                Architecture = $arch;
                InstallerUrl = $installer;
                InstallerSha256 = $sha256;
                ProductCode = $productCode;
            };
            $yamlObject.Installers += $installerEntry
        }
        # TODO: Add msix package to all three architectures.
        $newYamlData = -join($yamlHeader, (ConvertTo-YAML $yamlObject));
        Set-Content -Path $yamlPath -Value $newYamlData;
        $yamlPath = "manifests/m/Microsoft/PowerShell/$version/Microsoft.PowerShell.locale.en-US.yaml";
        $yamlObject = New-Object –TypeName PSObject -Property @{
            PackageIdentifier = "Microsoft.PowerShell";
            PackageVersion = $version;
            PackageLocale = "en-US";
            Publisher = "Microsoft Corporation";
            PublisherUrl = "https://github.com/PowerShell/PowerShell/";
            PublisherSupportUrl = "https://github.com/PowerShell/PowerShell/issues";
            Author = "Microsoft Corporation";
            PackageName = "PowerShell";
            PackageUrl = "https://microsoft.com/PowerShell";
            License = "MIT";
            LicenseUrl = " https://github.com/PowerShell/PowerShell/blob/master/LICENSE.txt";
            Copyright = "Copyright (c) Microsoft Corporation";
            CopyrightUrl = "https://github.com/PowerShell/PowerShell/blob/master/LICENSE.txt";
            ShortDescription = "PowerShell is a cross-platform task automation solution made up of a command-line shell, a scripting language, and a configuration management framework. PowerShell runs on Windows, Linux, and macOS.";
            Description = @'
PowerShell is a cross-platform (Windows, Linux, and macOS) automation and configuration tool/framework that works well with your existing tools and is optimized for dealing with structured data (e.g. JSON, CSV, XML, etc.), REST APIs, and object models.
It includes a command-line shell, an associated scripting language and a framework for processing cmdlets.
'@;
            Moniker = "pwsh";
            ReleaseNotesUrl = "https://github.com/PowerShell/PowerShell/releases/tag/v$version";
            Tags = @("command-line", "cross-platform", "open-source", "powershell", "pwsh", "shell");
            ManifestType = "defaultLocale";
            ManifestVersion = "1.2.0";
        };
        $newYamlData = -join($yamlHeader, (ConvertTo-YAML $yamlObject));
        Set-Content -Path $yamlPath -Value $newYamlData;
        $yamlPath = "manifests/m/Microsoft/PowerShell/$fourVersion/Microsoft.PowerShell.yaml";
        $yamlObject = New-Object –TypeName PSObject -Property @{
            PackageIdentifier = "Microsoft.PowerShell";
            PackageVersion = $fourVersion;
            DefaultLocale = "en-US";
            ManifestType = "version";
            ManifestVersion = "1.2.0";
        };
        $newYamlData = -join($yamlHeader, (ConvertTo-YAML $yamlObject));
        Set-Content -Path $yamlPath -Value $newYamlData;
        git add --all .
        git commit -m"add Microsoft.PowerShell version $fourVersion"
        git push -u origin powershell-$version;
        # Uncomment this once we've seen it work a few times and are happy with it.
        #
        # $title = "add Microsoft.PowerShell version $version";
        # $body = "This PR is auto-generated. If there's something wrong, please file an issue at https://github.com/PowerShell-Winget-Bot/my-source-code/issues";
        # gh pr create --title $title --body $body
    }
}

$closedPRs = gh pr list --author "PowerShell-Winget-Bot" --repo "microsoft/winget-pkgs" --state=closed --limit 10
  | Foreach-Object {((($_ -split '\t')[2]) -split ':')[1]};

$mergedPRs = gh pr list --author "PowerShell-Winget-Bot" --repo "microsoft/winget-pkgs" --state=merged --limit 10
  | Foreach-Object {((($_ -split '\t')[2]) -split ':')[1]};

foreach ($pr in ($closedPRs + $mergedPrs)) {
    git push origin -d $pr
}

